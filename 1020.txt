@제어문if
프로그램이 실행된 코드는 코딩된 문자들을
모두 컴파일 할수없다.
순차적인 단계는 모두 표현하면 똑같은 실행문과흐름들이
의미없이 길어진다.
선택의 개념을 만들어서 지금상황에서 이루워져야하는 상황들만 처리 될 수 있는 제어문을 조건문이라고 한다.

@조건문의 다양한 예시
@조건문(if/switch)
조건식의 판단으로 논리적인 판단에 의해서
프로그램 흐름을 제어한다,

1)if문 : 조건이 만족하면 중괄호의 코드를 실행한다.
@if(조건식){
	명령코드;//공백이나 탭으로 조건식 내포한 명령문을 구
분한다
		//들여쓰기
}
@if(조건식) : 수행문이 하나일경우는 생략도 가능하다
	명령코드;

2)if-else : 조건을 만족하지 않아도 실행해야하는 명령어가 있을때 사용한다.(참/거짓 의미따라 수행되어야하는 명령문들을 구분할때 사용한다.)
@if (조건식){
	//참(true)일때 실행
}else {
	//거짓(false)일때 실행
}
*상반된 관계가 있어서 바꾸는 것이다 하나의 조건식 여러개를 계산할때 사용된다,

3)if-elseif- : 조건식에 따라 여러개의 두가지 이상 논리연산을
사용할때 공통적인 부분에 분리된 조건문을 만들어서 사용한다.
if(조건식1){
	//조건식1을 만족할경우 실행된다.
}else if(조건식2){
	//조건식 2을 만족할경우 실행된다.
} else{
	//조건식 1과 조건식2 만족하지 않을 경우 실행된다,
}
*if-elseif : else 가 생략될 수도 있다. 
*else if 문은 제한이 없다.(100개도 사용가능 ) 성능에 문제가있다!

중첩 if
#ㅇdㅇdㅇㅇdㅇd
if(조건식1){
// 조건식1일경우  true 수행되는 문장
}else{
 //조건식이 1이 아닐경우  false 수행되는 문장
if 조건식2{
//조건식 2일경우 모두 true일때 수행문장
}else{
//조건식 1true이고 조건식 2가 false 수행문장
}
}else{
//조건식이 1이 아닐경우 false  수행되는문장
}


switch  dㅇ문 : if 문은 판단 (true/false_
)애ㅔ따라 실행문이 결정되었다면 
swithc 문은 변수의값에 따라 실행문이 결정ㄷ4ㅚㄴ다.
switch()조건식){결과고값 = 5
case5 값1:
case7 값2: 
 case 8 값3: 
cefault : //모든 case x = defalut 실행 

}
1) switc으ㅜㄴ 두개의 피연산자(변수==값1) 가티을때만 조건으로 활용
2)case 여러개고 갯ㅇ수가 정해져있지않다
3)case = break (멈춰!) default 가지않는다
4)default 생략가능
5)swithch 제약조건 : 조건식결과(=case)
1.case X : 소수 처리 안됨 case : 벼ㅑㄴ수안됨
2.case O : 문자 리터널 돼  (정수의숫자그대로='1')
case O :정수 상수는 됨 = 전역변수됨
 case O : 문자 리터널("YES")JDK 1.7부터 허용





