@ 매개변수(함수:(매개변수)->리턴(x/o))의 다형성
1)참조변수의 다형적인 특징은 매개변수 적용가능하다
-자신 및 자손타입의 인스턴스를 넘겨줄수있다
2)전자제품 판매점 고객관리예제 

@오버로든/ 오버라이딩 정리하기
오버로딩 : 기본생성자(다양한 매개변수를 활용해서 사용하는 방법
기본생성자 (나자신 ) :  객체가 생성될때 초기화된다.
기본생성자 (매개 변수 개수. 매개변수자료형) 여러가지로 만들수있다
슈퍼생성자(상속받은 부모를 의존할때 )먼저 정의한다
객체가 생성될때 \
class Person{
Person(){
}
} 
class price extends Person{
money =0; 
price (int price,String name){
super ();//수퍼생성자 
this.money = price
}
void talk (){
A
}
}
main method(){
Price p = new Price(price,name);
p,.name;
p.price;
}

오버라이디 : 상속받은 조상의 매서드를 자식의 다양한 형태로 
구조를 만들고 사용한것

p304페이지 section 12 :추상 클래스와 메서드
			인터페이스(객체지향끝)

선언부 : 리턴타입 함수(입력값) : 호출할때
구현부 : 함수를 구체적으로 정의한 내용
------>호출되여ㅓㅆ을때 처리할 내용
메서드 -> 함수

-----String func(){ <-이게 선언이야
------return "test" ; <--이게 구현
------}

추상클래스 :  미완성 설계도 
선언부: 함수를 호출하는 부분을 공통으로 
만드는거야 ==> 추상클래스 (부모) 
구현부 :  호출했을 때 처리할 내용
--> 추상 클래스를 상속받은 자식이 완성한다
1) 미완성 설계도 미완성 메서드 한다
2) 다른 클래스 도움으,ㄹ 준다(상속받은 자식)= 미완성 되었다 ! 
인스턴스 생성불가해! (몸통이 없다 그래서 안돼)
3) 인스턴스 생성을 위해서는 자식이 상속을 통해ㅑ 추상 메서드완성
4)추상클래스는 추상메서드를 구현한다는 방법만 다르고 
일반클래스와 동일 하다.
1) 추상클래스를 abstract class Player{
//추상메서드
//1.일반 인스턴스 메서드/ 인스턴스 변수도 만들고 상속 받을수있다
//2.생성자도 만들수있다(오버로딩) 추사읔ㄹ래스 (부모)
슈퍼생성자 만들수있다
//3. 추상메서들르 만들면(무조건x) 상속받은 자식은 무조건 추상메서드를 강제로구현( 아니면 오류)
}

2)상속계층도 따라 내려갈수록 클래스는 세분화되며 구체화정도가 
심해진다(조상의 클래스를 추상메서드로 활용하면 좋지 않다)
















