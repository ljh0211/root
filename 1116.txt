@내부 클래스

클래스안에 만들어진 다른클래스를 중점클래스라고 한다 
독립적으로 선언하는 것이 독립적으로 좋으나 특정 클래스 
관계를 맺을 경우 중첩클래스로 선언하는 것이 유지보수
좋다 코드의 복잡성을 감추기위해서 멤버를 쉽게 사용할수
있다

외부클래스 : 자동차     
내부클래스 : 엔진 기어 방향지시등 드라이브 핸들 

@내부클래스의 종류
1) 멤버 클래스 / 로컬 클래스 
-> 인스턴스 멤버 클래스 : 외부 클래스를 객체로 만들고
내부클래스를 허용한다
코드의 형식
[접근제한자] class A{ //외부 클래스 (자동차)
	[접근제한자] class B {//내부클래스 (엔진)
	}
}

-> 정적 멤버 클래스 : 외부클래스를 객체로 만들필요가 없다
내부클래스를 허용한다
A객체를 생성하지 않아도 B라는 객체를 생성할수있다.
코드형식
[접근제한자] static class A {
	[접근제한자] static class B {
	
	}
}

내부
로컬 클래스 : 생성자 / 메서드 통해서만 생성될 수 있다

(local class: 내부안에서 실행된다는거임)
생성자나 메서드 내부안에서 실행될때만 B 객체를 생성한다

외부클래스
class A{

A(){//외부클래스 생성자 호출가능
{	class B{}
	B b=  new B(); 생성자객체생성호출가능
}
void method () {//외부클래스 메서드 
	class B{}
	B b=  new B(); 생성자객체생성호출가능
}
}
1. 메서드나 생성자가호출이 종료되면 지역클래스
인스턴스도 종료도니다 = 특징
2. 메서드 매개변수값이나 인스턴스 지역변수일경우
내부 클래스안에 들어갈때 final 이라는 Reading 만
되는 변수값으로 들어간다 JDK 17버전 이후로는 final
삭제된경우가 있어서 확인을 해봐야한다

@ 내부클래스 접근제한
1.외부클래스는 멤버 접근제한
중첩클래스는 외부클래스와 긴밀한 관계를 맺는다
외브클래스 멤버(필드 메서드) 접근한수 있다
중첩클래스 어떻게 선언되었는냐에 따라 접근방법이
달라진다 
인스턴스 멤버 클래스 -> 외부클래스 모든 필드와 메서드 
정적/인스턴스 
정적 멤버 클래스 -> 외부클래스의 정적 필드와 정적 메서드
(외부클래스 :  인스턴스 멤버 허용 x)_

2. 멤버클래스 접근제한자
인스턴스 클래스를 pritate 선언할경우 getter 를 통해서 
클래스를 얻도록 할수 있고 내부클래스 접근제한자
( private)를 통해 제한가능하다

@중첩 인터페이스 
안드로이드 버튼 클릭할때 이벤트를 인터페이스를
만들수있다
외부클래스와 긴밀한 관계를 맺는 구현 객체를 만들기 
위해서 선언한다 (버튼 인터페이스)

구현방밥)
class A { // 인터페이스로 접근하고 객체를 다양하게 접근하게 해서
구현부를 다르게 만든다
	[접근제한자]interface B{ // 중첩 인터페이스
	//상수필드
	//추상메서드 
	//디폴트 메서드
 	//정적 메서드
	}
}

필드에 다형성을 알수 있고 버튼을 어떤 객체를 주입할지 
알지 못하고 객체를 주입할대 개발자가 주입할수 있는 
클래스를 만들어야한다
문제 1 : 중첩 인터페이스를 이용한 버튼 객체 주입한다


@익명클래스









